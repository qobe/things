/**
 * 
 */

var cast = window.cast || {};

// Anonymous namespace

(function() {
	'use strict';
	
	Things.PROTOCOL = 'urn:x-cast:kobe.cast.things';
	
	function NewGame(){
		this.castReceiverManager_ = cast.receiver.CastReceiverManager.getInstance();
		this.castMessageBus_ = this.castReceiverManager_.getCastMessageBus(Things.PROTOCOL,
				cast.receiver.cast.CastMessageBus.MessageType.STRING);
	}
	
	
	/**
	 * Object model for the game. should track events and data that can be passed 
	 * between players
	 */
	ThingsGame.prototype = {
			
			/**
			 * sender connected event
			 * @param {event} event the sender connected
			 * update scoreboard ui with sender info
			 */
			onSenderConnected: function(event){
				this.castReceiverManager_.getSenders().length;
			},
			
			/**
			 * sender disconnect event
			 * @param {event} event the sender disconnected
			 * store disconnected sender's data incase of reconnection?
			 * terminate if last sender
			 */
			onSenderDisconnected: function(event){
				if(this.castReceiverManager_.getSenders() == 0 &&
						event.reason == cast.receiver.system.DisconnectReason.REQUESTED_BY_SENDER){
					window.close();
				}
			},
			
			/**
			 * Message received event; main communication avenue for senders
			 * parse message and determine which functions to call
			 */
			onMessage: function(event){
				var message = event.data;
				var senderId = event.senderId;
				if(message.command == 'update'){
					this.updateUI(senderId, message);
				} else if(message.command == 'join'){
					this.onJoin(senderId, message);
				}
			},
	}
	
	
})();

